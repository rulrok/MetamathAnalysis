package parser;
import java_cup.runtime.*;

parser code 
{:
  Lexer lexer;

  public parser (Lexer lexer) { this.lexer = lexer; } 

  public void println(Object o) { System.out.println(o); }


:}; /* End of 'parser code' section */

/* Preliminaries to set up and use the scanner.  */
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */

terminal            LPARENT, RPARENT;
terminal            SCOPE_START, SCOPE_END, COMMENT_START, COMMENT_END;
terminal            INCLUDE_START, INCLUDE_END;
terminal            CONSTANT_STMT, VARIABLE_STMT;
terminal            DISJUNCT_VARIABLE_STMT, VARIABLE_TYPE_HYPOTHESIS_STMT;
terminal            LOGICAL_HYPOTHESIS_STMT, AXIOMATIC_ASSERTION_STMT;
terminal            PROVABLE_ASSERTION_STMT, PROOF_STMT, COMPACT_PROOF,STMT_END;
terminal String     LABEL, MATH_SYMB;

/* Non terminals */

non terminal    initial_symbol, empty;
non terminal    math_symb_list, label_list;
non terminal    const_declaration, var_declaration, disjoint_var_declaration;
non terminal    var_type_hypothesis_declaration, logical_hypothesis_declaration;
non terminal    axiomatic_declaration, theorem_declaration, proof_declaration;

start with initial_symbol;

/* The grammar */

initial_symbol      ::=
                      const_declaration                 initial_symbol
                    | var_declaration                   initial_symbol
                    | disjoint_var_declaration          initial_symbol
                    | var_type_hypothesis_declaration   initial_symbol
                    | logical_hypothesis_declaration    initial_symbol
                    | axiomatic_declaration             initial_symbol
                    | theorem_declaration               initial_symbol                
                    | empty
                    ;

empty               ::=
                    ;

math_symb_list      ::=
                      math_symb_list MATH_SYMB:m
                        {: println("Math symbol found: " + m); :}
                    | MATH_SYMB:m
                        {: println("Math symbol found: " + m); :}
                    ;

label_list          ::=
                      label_list LABEL:l
                        {: println("Label found: " + l); :}
                    | LABEL:l
                        {: println("Label found: " + l); :}
                    ;
 
const_declaration   ::= 
                      CONSTANT_STMT math_symb_list STMT_END
                        {: println("Constant declaration finished"); :}
                    ;

var_declaration     ::= 
                      VARIABLE_STMT math_symb_list STMT_END
                        {: println("Variable declaration finished"); :}
                    ;

disjoint_var_declaration ::=
                      DISJUNCT_VARIABLE_STMT MATH_SYMB:m 
                        {: println("Math symbol found: " + m); :}
                      math_symb_list STMT_END
                        {: println("Disjunct declaration finished"); :}
                    ;

/* See Metamath book p. 105 for references */
var_type_hypothesis_declaration ::=
                      LABEL:l
                        {: println("label '" + l + "' found."); :}
                      VARIABLE_TYPE_HYPOTHESIS_STMT
                      MATH_SYMB:constant MATH_SYMB:variable
                        {: println("Variable " + variable + " of type " + constant + " found."); :}
                      STMT_END
                        {: println("Variable hypothesis declaration finished"); :}
                    ;

logical_hypothesis_declaration ::=
                      LABEL:l
                        {: println("label '" + l + "' found."); :}
                      LOGICAL_HYPOTHESIS_STMT
                        {: println("Logical hypothesis declaration started"); :}
                      math_symb_list
                      STMT_END
                        {: println("Variable hypothesis declaration finished"); :}
                    ;

axiomatic_declaration ::=
                      LABEL:l
                        {: println("label '" + l + "' found."); :}
                      AXIOMATIC_ASSERTION_STMT
                        {: println("Axiomatic declaration started"); :}
                      MATH_SYMB:m math_symb_list
                        {: 
                           if (m.equals("|-")){
                               println("Axiom (ax-) or definition (df-) found");
                           } else {
                               println("Syntax construction found");
                           }
                        :}
                      STMT_END
                        {: println("Axiomatic declaration finished"); :}
                    ;

theorem_declaration ::=
                      LABEL:l
                        {: println("label '" + l + "' found."); :}
                      PROVABLE_ASSERTION_STMT
                        {: println("Theorem declaration started"); :}
                      MATH_SYMB:m math_symb_list
                      proof_declaration
                      STMT_END
                        {: println("Theorem declaration finished"); :}
                    ;

proof_declaration   ::=
                      PROOF_STMT
                        {: println("Proof RPN list"); :}
                      label_list
                    | PROOF_STMT
                        {: println("Compact proof format"); :}
                      LPARENT label_list RPARENT COMPACT_PROOF:p
                        {: println("Compact proof found: " + p); :}
                    ;